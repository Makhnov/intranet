# Generated by Django 5.0 on 2024-03-08 07:31

import django.db.models.deletion
import modelcluster.fields
import utils.streamfield
import wagtail.blocks
import wagtail.contrib.table_block.blocks
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_pdf_view.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ConvocationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateTimeField(verbose_name='Date')),
                ('body', wagtail.fields.RichTextField(blank=True, verbose_name='Agenda')),
            ],
            options={
                'verbose_name': 'convocation',
                'verbose_name_plural': 'convocations',
            },
            bases=(wagtail_pdf_view.mixins.PdfViewPageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='AdministrationIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BureauxIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'bureau',
                'verbose_name_plural': 'bureaux',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CommissionPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('type', models.CharField(choices=[('commission', 'Commission'), ('groupe_de_travail', 'Groupe de travail')], default='commission', help_text='Choose if this is a commission or a working group.', max_length=20, verbose_name='Type')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'commission ou groupe de travail',
                'verbose_name_plural': 'commissions ou groupes de travail',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CommissionsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'Commissions (Index)',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CompteRenduPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='Date')),
                ('quorum', models.BooleanField(default=True, help_text="Uncheck this box if the quorum isn't reached.", verbose_name='Quorum')),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.CharBlock(form_classname='title', icon='title')), ('paragraph', wagtail.blocks.RichTextBlock(icon='pilcrow')), ('media', utils.streamfield.CustomMediaBlock(icon='media')), ('image', wagtail.images.blocks.ImageChooserBlock(icon='image')), ('document', wagtail.documents.blocks.DocumentChooserBlock(icon='doc-full')), ('link', wagtail.blocks.StructBlock([('url', wagtail.blocks.URLBlock(help_text='Enter the URL.', label='URL')), ('text', wagtail.blocks.CharBlock(help_text='Enter the visible text for this link (optional).', label='Replacement Text', required=False))], icon='link')), ('embed', wagtail.blocks.StructBlock([('embed_url', wagtail.embeds.blocks.EmbedBlock(label='URL a intégrer')), ('resolution', wagtail.blocks.ChoiceBlock(choices=[('very_small', 'Very small'), ('small', 'Small'), ('medium', 'Medium'), ('large', 'Large'), ('very_large', 'Very large')], label='Size of the frame')), ('alternative_title', wagtail.blocks.CharBlock(blank=True, help_text='Alternative title for users accessibility.', label='Alternative title', required=False))], icon='media')), ('list', wagtail.blocks.ListBlock(wagtail.blocks.CharBlock(icon='list-ul'), icon='list-ul')), ('quote', wagtail.blocks.BlockQuoteBlock(icon='openquote')), ('table', wagtail.contrib.table_block.blocks.TableBlock(icon='table', table_options={'autoColumnSize': False, 'colHeaders': True, 'contextMenu': ['row_above', 'row_below', '---------', 'col_left', 'col_right', '---------', 'remove_row', 'remove_col', '---------', 'undo', 'redo', '---------', 'copy', 'cut', '---------', 'alignment', '---------', 'mergeCells'], 'height': 108, 'language': 'fr-FR', 'mergeCells': True, 'minSpareRows': 0, 'renderer': 'text', 'rowHeaders': True, 'startCols': 3, 'startRows': 3})), ('PDF', wagtail.blocks.StructBlock([('pdf_document', wagtail.documents.blocks.DocumentChooserBlock(help_text='Chose a PDF wich will be converted to images and added in the flow. Name smartly the document, it will be used to create a collection.', label='Document', required=True)), ('pdf_import', wagtail.blocks.BooleanBlock(default=False, help_text='Use cautiously. It will override all existing images in this section.', label='Save and import', required=False)), ('pdf_images', wagtail.blocks.ListBlock(wagtail.images.blocks.ImageChooserBlock(required=False), form_classname='collapsible, collapsed', help_text='You can remove or replace any of the images below. If you want to restore the original images, click again on the import button.', label='Aperçu des pages', required=False))], icon='doc-full')), ('DOCX', wagtail.blocks.StructBlock([('docx_document', wagtail.documents.blocks.DocumentChooserBlock(help_text='Chose a DOCX file to import in the flow.', label='Document', required=True)), ('docx_import', wagtail.blocks.BooleanBlock(default=False, help_text='Use cautiously. It will override all existing content in this section.', label='Save and import', required=False)), ('docx_content', wagtail.blocks.StreamBlock([('heading', wagtail.blocks.StructBlock([('heading', wagtail.blocks.CharBlock(label='content', required=True)), ('heading_level', wagtail.blocks.ChoiceBlock(choices=[('h1', 'Heading 1'), ('h2', 'Heading 2'), ('h3', 'Heading 3'), ('h4', 'Heading 4'), ('h5', 'Heading 5'), ('h6', 'Heading 6')], label='level', required=False)), ('position', wagtail.blocks.ChoiceBlock(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right'), ('justify', 'Justify')], required=False))])), ('paragraph', wagtail.blocks.StructBlock([('paragraph', wagtail.blocks.RichTextBlock(label='content', required=True)), ('position', wagtail.blocks.ChoiceBlock(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right'), ('justify', 'Justify')], required=False))])), ('image', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(label='content', required=True)), ('position', wagtail.blocks.ChoiceBlock(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right'), ('justify', 'Justify')], required=False)), ('size', wagtail.blocks.ChoiceBlock(choices=[('icon', 'Icon'), ('small', 'Small'), ('medium', 'Medium'), ('large', 'Large'), ('full', 'Full')], label='size', required=False))])), ('table', wagtail.blocks.StructBlock([('table', wagtail.contrib.table_block.blocks.TableBlock(label='content', required=True, table_options={'autoColumnSize': False, 'colHeaders': True, 'contextMenu': ['row_above', 'row_below', '---------', 'col_left', 'col_right', '---------', 'remove_row', 'remove_col', '---------', 'undo', 'redo', '---------', 'copy', 'cut', '---------', 'alignment', '---------', 'mergeCells'], 'height': 108, 'language': 'fr-FR', 'mergeCells': True, 'minSpareRows': 0, 'renderer': 'text', 'rowHeaders': True, 'startCols': 3, 'startRows': 3})), ('position', wagtail.blocks.ChoiceBlock(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right'), ('justify', 'Justify')], required=False))]))], classname='collapsible, collapsed', help_text='You can remove or replace any of the content below. If you want to restore the original content, click again on the import button.', label='Aperçu du contenu', required=False))], icon='doc-full'))], blank=True, help_text='This is the main content of the page.', null=True, verbose_name='Agenda')),
                ('secretary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secretary_cr', to=settings.AUTH_USER_MODEL, verbose_name='Secrétaire')),
                ('substitute_users', models.ManyToManyField(blank=True, related_name='substitute_cr', to=settings.AUTH_USER_MODEL, verbose_name='Remplaçants')),
                ('convocation', models.OneToOneField(help_text='Sélectionnez la convocation associée.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.convocationpage', verbose_name='Convocation')),
            ],
            options={
                'verbose_name': 'compte-rendu',
                'verbose_name_plural': 'comptes-rendus',
            },
            bases=(wagtail_pdf_view.mixins.PdfViewPageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='CompteRenduPieceJointe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Title')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtaildocs.document', verbose_name='File')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='compterendu_documents', to='administration.compterendupage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConferencesIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'conférence',
                'verbose_name_plural': 'conférences',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConseilsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'conseil',
                'verbose_name_plural': 'conseils',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConvocationPieceJointe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Title')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtaildocs.document', verbose_name='File')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='convocation_documents', to='administration.convocationpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConvocationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function_weight', models.IntegerField(blank=True, null=True, verbose_name='Function Weight')),
                ('function', models.CharField(blank=True, max_length=255, null=True, verbose_name='Function')),
                ('gender', models.CharField(blank=True, max_length=50, null=True, verbose_name='Gender')),
                ('identity', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identity')),
                ('municipality', models.CharField(blank=True, max_length=255, null=True, verbose_name='Municipality')),
                ('presence', models.IntegerField(choices=[(1, 'Présent'), (2, 'Remplacé'), (3, 'Non remplacé')], default=1, verbose_name='Presence')),
                ('alternate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='convocation_user_alternates', to=settings.AUTH_USER_MODEL, verbose_name='Alternate')),
                ('convocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='convocation_users', to='administration.convocationpage', verbose_name='Convocation')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='convocation_user_parents', to='wagtailcore.page', verbose_name='Parent Page')),
                ('substitute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='convocation_user_substitutes', to=settings.AUTH_USER_MODEL, verbose_name='Substitute')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Convocation User',
                'verbose_name_plural': 'Convocation Users',
                'unique_together': {('convocation', 'user')},
            },
        ),
        migrations.AddField(
            model_name='compterendupage',
            name='replaced_users',
            field=models.ManyToManyField(blank=True, related_name='replaced_cr', to='administration.convocationuser', verbose_name='Excusés et remplacés'),
        ),
        migrations.AddField(
            model_name='compterendupage',
            name='unreplaced_users',
            field=models.ManyToManyField(blank=True, related_name='unreplaced_cr', to='administration.convocationuser', verbose_name='Excusés non remplacés'),
        ),
    ]
