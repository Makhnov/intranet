# Generated by Django 5.0 on 2024-02-26 15:52

import django.db.models.deletion
import home.models
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.table_block.blocks
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_pdf_view.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('images', '0001_initial'),
        ('wagtailcore', '0092_query_searchpromotion_querydailyhits'),
        ('wagtaildocs', '0012_uploadeddocument'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ConvocationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateTimeField(verbose_name='Date')),
                ('body', wagtail.fields.RichTextField(blank=True, verbose_name='Agenda')),
            ],
            options={
                'verbose_name': 'convocation',
                'verbose_name_plural': 'convocations',
            },
            bases=(wagtail_pdf_view.mixins.PdfViewPageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='AdministrationIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BureauxIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'bureau',
                'verbose_name_plural': 'bureaux',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CommissionPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('type', models.CharField(choices=[('commission', 'Commission'), ('groupe_de_travail', 'Groupe de travail')], default='commission', help_text='Choose if this is a commission or a working group.', max_length=20, verbose_name='Type')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'commission ou groupe de travail',
                'verbose_name_plural': 'commissions ou groupes de travail',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CommissionsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'Commissions (Index)',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CompteRenduPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='Date')),
                ('quorum', models.BooleanField(default=True, help_text="Uncheck this box if the quorum isn't reached.", verbose_name='Quorum')),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.CharBlock(form_classname='title', icon='title')), ('paragraph', wagtail.blocks.RichTextBlock(icon='pilcrow')), ('media', home.models.MediaBlock(icon='media')), ('image', wagtail.images.blocks.ImageChooserBlock(icon='image')), ('document', wagtail.documents.blocks.DocumentChooserBlock(icon='doc-full')), ('link', wagtail.blocks.StructBlock([('url', wagtail.blocks.URLBlock(help_text='Enter the URL.', label='URL')), ('text', wagtail.blocks.CharBlock(help_text='Enter the visible text for this link (optional).', label='Replacement Text', required=False))], icon='link')), ('embed', wagtail.blocks.StructBlock([('embed_url', wagtail.embeds.blocks.EmbedBlock(label='URL a intégrer')), ('resolution', wagtail.blocks.ChoiceBlock(choices=[('very_small', 'Very small'), ('small', 'Small'), ('medium', 'Medium'), ('large', 'Large'), ('very_large', 'Very large')], label='Size of the frame')), ('alternative_title', wagtail.blocks.CharBlock(blank=True, help_text='Alternative title for users accessibility.', label='Alternative title', required=False))], icon='media')), ('list', wagtail.blocks.ListBlock(wagtail.blocks.CharBlock(icon='list-ul'), icon='list-ul')), ('quote', wagtail.blocks.BlockQuoteBlock(icon='openquote')), ('table', wagtail.contrib.table_block.blocks.TableBlock(icon='table')), ('chart', wagtail.blocks.StreamBlock([('chart_block', wagtail.blocks.StructBlock([('chart_type', wagtail.blocks.ChoiceBlock(choices=[('line', 'Line Chart'), ('bar', 'Vertical Bar Chart'), ('bar_horizontal', 'Horizontal Bar Chart'), ('area', 'Area Chart'), ('multi', 'Combo Line/Bar/Area Chart'), ('pie', 'Pie Chart'), ('doughnut', 'Doughnut Chart'), ('radar', 'Radar Chart'), ('polar', 'Polar Chart'), ('waterfall', 'Waterfall Chart')], label='Chart Type')), ('title', wagtail.blocks.CharBlock(required=False)), ('datasets', wagtail.blocks.TextBlock(default='{"data":[], "options":{}}')), ('settings', wagtail.blocks.StructBlock([('show_legend', wagtail.blocks.BooleanBlock(default=False, group='General', label='Show legend', required=False)), ('html_legend', wagtail.blocks.BooleanBlock(default=False, group='General', label='Use HTML legend', required=False)), ('legend_position', wagtail.blocks.ChoiceBlock(choices=[('top', 'Top'), ('bottom', 'Bottom'), ('left', 'Left'), ('right', 'Right')], group='General', label='Legend position')), ('reverse_legend', wagtail.blocks.BooleanBlock(default=False, group='General', label='Reverse legend', required=False)), ('show_values_on_chart', wagtail.blocks.BooleanBlock(default=False, group='General', label='Show values on chart', required=False)), ('precision', wagtail.blocks.IntegerBlock(default=1, group='General', label='Precision in labels/tooltips')), ('show_grid', wagtail.blocks.BooleanBlock(default=True, group='General', label='Show Chart Grid', required=False)), ('x_label', wagtail.blocks.CharBlock(group='General', label='X axis label', required=False)), ('stacking', wagtail.blocks.ChoiceBlock(choices=[('none', 'No stacking'), ('stacked', 'Stacked'), ('stacked_100', 'Stacked 100%')], group='General', label='Stacking')), ('unit_override', wagtail.blocks.CharBlock(group='General', label='Unit override', required=False)), ('y_left_min', wagtail.blocks.CharBlock(group='Left_Axis', label='Left Y axis minimum value', required=False)), ('y_left_max', wagtail.blocks.CharBlock(group='Left_Axis', label='Left Y axis maximum value', required=False)), ('y_left_step_size', wagtail.blocks.CharBlock(group='Left_Axis', label='Left Y axis step size', required=False)), ('y_left_label', wagtail.blocks.CharBlock(group='Left_Axis', label='Left Y axis label', required=False)), ('y_left_data_type', wagtail.blocks.ChoiceBlock(choices=[('number', 'Numerical'), ('percentage', 'Percentage')], group='Left_Axis', label='Left Y axis data type', required=False)), ('y_left_precision', wagtail.blocks.IntegerBlock(default=0, group='Left_Axis', label='Left Y axis tick precision')), ('y_left_show', wagtail.blocks.BooleanBlock(default=True, group='Left_Axis', label='Show left axis numbers', required=False)), ('y_right_min', wagtail.blocks.CharBlock(group='Right_Axis', label='Right Y axis minimum value', required=False)), ('y_right_max', wagtail.blocks.CharBlock(group='Right_Axis', label='Right Y axis maximum value', required=False)), ('y_right_step_size', wagtail.blocks.CharBlock(group='Right_Axis', label='Right Y axis step size', required=False)), ('y_right_label', wagtail.blocks.CharBlock(group='Right_Axis', label='Right Y axis label', required=False)), ('y_right_data_type', wagtail.blocks.ChoiceBlock(choices=[('number', 'Numerical'), ('percentage', 'Percentage')], group='Right_Axis', label='Right Y axis data type', required=False)), ('y_right_precision', wagtail.blocks.IntegerBlock(default=0, group='Right_Axis', label='Right Y axis tick precision')), ('y_right_show', wagtail.blocks.BooleanBlock(default=True, group='Right_Axis', label='Show right axis numbers', required=False)), ('pie_border_width', wagtail.blocks.IntegerBlock(default=2, group='Pie_Chart', label='Width of pie slice border')), ('pie_border_color', wagtail.blocks.CharBlock(default='#fff', group='Pie_Chart', label='Color of pie slice border'))]))]))], icon='chart'))], blank=True, help_text='This is the main content of the page.', null=True, verbose_name='Agenda')),
                ('secretary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secretary_cr', to=settings.AUTH_USER_MODEL, verbose_name='Secrétaire')),
                ('substitute_users', models.ManyToManyField(blank=True, related_name='substitute_cr', to=settings.AUTH_USER_MODEL, verbose_name='Remplaçants')),
                ('convocation', models.OneToOneField(help_text='Sélectionnez la convocation associée.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.convocationpage', verbose_name='Convocation')),
            ],
            options={
                'verbose_name': 'compte-rendu',
                'verbose_name_plural': 'comptes-rendus',
            },
            bases=(wagtail_pdf_view.mixins.PdfViewPageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='CompteRenduPieceJointe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Title')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtaildocs.document', verbose_name='File')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='compterendu_documents', to='administration.compterendupage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConferencesIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'conférence',
                'verbose_name_plural': 'conférences',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConseilsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('heading', models.CharField(blank=True, help_text='Displayed in menus, the heading is the title of the page.', max_length=255, null=True, verbose_name='Heading')),
                ('tooltip', models.CharField(blank=True, help_text='Used for accessibility (alt, title) and when user mouse over the icon.', max_length=255, null=True, verbose_name='Tooltip')),
                ('label', models.SlugField(blank=True, help_text='Le texte qui apparaitra dans le titre des convocations et des comptes-rendus.', max_length=15, verbose_name='Label')),
                ('logo', models.ForeignKey(blank=True, help_text='𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦: Round or square (1/1). 𝐈𝐝𝐞𝐚𝐥 𝐟𝐨𝐫𝐦𝐚𝐭: Filled SVG. 𝐒𝐞𝐜𝐨𝐧𝐝𝐚𝐫𝐲 𝐟𝐨𝐫𝐦𝐚𝐭: PNG with transparent background.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.customimage', verbose_name='Logo (SVG, png, jpg, etc.)')),
            ],
            options={
                'verbose_name': 'conseil',
                'verbose_name_plural': 'conseils',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConvocationPieceJointe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Title')),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtaildocs.document', verbose_name='File')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='convocation_documents', to='administration.convocationpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConvocationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function_weight', models.IntegerField(blank=True, null=True, verbose_name='Function Weight')),
                ('function', models.CharField(blank=True, max_length=255, null=True, verbose_name='Function')),
                ('gender', models.CharField(blank=True, max_length=50, null=True, verbose_name='Gender')),
                ('identity', models.CharField(blank=True, max_length=255, null=True, verbose_name='Identity')),
                ('municipality', models.CharField(blank=True, max_length=255, null=True, verbose_name='Municipality')),
                ('presence', models.IntegerField(choices=[(1, 'Présent'), (2, 'Remplacé'), (3, 'Non remplacé')], default=1, verbose_name='Presence')),
                ('alternate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='convocation_user_alternates', to=settings.AUTH_USER_MODEL, verbose_name='Alternate')),
                ('convocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='convocation_users', to='administration.convocationpage', verbose_name='Convocation')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='convocation_user_parents', to='wagtailcore.page', verbose_name='Parent Page')),
                ('substitute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='convocation_user_substitutes', to=settings.AUTH_USER_MODEL, verbose_name='Substitute')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Convocation User',
                'verbose_name_plural': 'Convocation Users',
                'unique_together': {('convocation', 'user')},
            },
        ),
        migrations.AddField(
            model_name='compterendupage',
            name='replaced_users',
            field=models.ManyToManyField(blank=True, related_name='replaced_cr', to='administration.convocationuser', verbose_name='Excusés et remplacés'),
        ),
        migrations.AddField(
            model_name='compterendupage',
            name='unreplaced_users',
            field=models.ManyToManyField(blank=True, related_name='unreplaced_cr', to='administration.convocationuser', verbose_name='Excusés non remplacés'),
        ),
    ]
