# Generated by Django 5.0 on 2024-02-14 11:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('civility', models.CharField(choices=[('Monsieur', 'Monsieur'), ('Madame', 'Madame'), ('Monsieur/Madame', 'Neutre')], default='Monsieur/Madame', max_length=15, verbose_name='civility')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('address1', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 1')),
                ('address2', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address line 2')),
                ('zip_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='Postal Code')),
                ('city', models.CharField(blank=True, max_length=1024, null=True, verbose_name='City')),
                ('mobile_phone', models.CharField(blank=True, help_text='With country code and no spaces', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid international mobile phone number starting with +(country code)', regex='^\\+(?:[0-9]●?){6,14}[0-9]$')], verbose_name='Mobile phone')),
                ('municipality', models.TextField(blank=True, choices=[('31011', 'Arbas'), ('31012', 'Arbon'), ('31014', 'Arguenos'), ('31018', 'Arnaud-Guilhem'), ('31020', 'Aspet'), ('31030', 'Ausseing'), ('31034', 'Auzas'), ('31050', 'Beauchalot'), ('31059', 'Belbèze-en-Comminges'), ('31095', 'Cabanac-Cazaux'), ('31110', 'Cassagne'), ('31112', 'Castagnède'), ('31114', 'Castelbiague'), ('31124', 'Castillon-de-Saint-Martory'), ('31131', 'Cazaunous'), ('31140', 'Chein-Dessus'), ('31155', 'Couret'), ('31167', 'Encausse-les-Thermes'), ('31591', 'Escoulis'), ('31174', 'Estadens'), ('31183', 'Figarol'), ('31191', 'Fougaron'), ('31195', 'Francazal'), ('31198', 'Le Fréchet'), ('31208', 'Ganties'), ('31236', 'Herran'), ('31237', 'His'), ('31241', "Izaut-de-l'Hôtel"), ('31245', "Juzet-d'Izaut"), ('31260', 'Laffite-Toupière'), ('31296', 'Lestelle-de-Saint-Martory'), ('31314', 'Mancioux'), ('31315', 'Mane'), ('31321', 'Marsoulas'), ('31336', 'Mazères-sur-Salat'), ('31342', 'Milhas'), ('31348', 'Moncaup'), ('31357', 'Montastruc-de-Salies'), ('31372', 'Montespan'), ('31376', 'Montgaillard-de-Salies'), ('31391', 'Montsaunès'), ('31431', "Portet-d'Aspet"), ('31440', 'Proupiary'), ('31447', 'Razecueillé'), ('31457', 'Roquefort-sur-Garonne'), ('31461', 'Rouède'), ('31503', 'Saint-Martory'), ('31504', 'Saint-Médard'), ('31521', 'Saleich'), ('31523', 'Salies-du-Salat'), ('31544', 'Sengouagnet'), ('31545', 'Sepx'), ('31550', 'Soueich'), ('31554', 'Touille'), ('31562', 'Urau')], null=True, verbose_name='municipality')),
                ('function_municipality', models.TextField(blank=True, choices=[('1', 'Maire'), ('2', 'Adjoint'), ('3', 'Conseiller municipal')], null=True, verbose_name='municipal council function')),
                ('function_council', models.TextField(blank=True, choices=[('1', 'Président'), ('2', 'Vice-président'), ('3', 'Conseiller communautaire'), ('4', 'Délégué suppléant')], null=True, verbose_name='communautary council function')),
                ('function_commission', models.TextField(blank=True, choices=[('1', 'Président'), ('2', 'Chargé de commission'), ('3', 'Membre')], null=True, verbose_name='commission function')),
                ('function_bureau', models.TextField(blank=True, choices=[('1', 'Président'), ('2', 'Vice-président')], null=True, verbose_name='bureau function')),
                ('function_conference', models.TextField(blank=True, choices=[('1', 'Président'), ('2', 'Vice-président'), ('3', 'Maire')], null=True, verbose_name='mayor conference function')),
                ('commission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='administration.commissionpage', verbose_name='commission')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['last_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
