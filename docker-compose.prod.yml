version: '3.8'

networks:
  backend:
    name: backend
    driver: bridge
  frontend:
    name: frontend
    driver: bridge

volumes:
  postgres_data:
    name: postgres_data
  static_volume:
    name: static_volume
  media_volume:
    name: media_volume

services:
  db:
    container_name: db
    restart: always
    image: postgres:14.0-alpine
    ports:
      - "5432:5432"
    volumes:
      - /home/webmaster/docker_intranet/files/ignore/intranet.sql:/docker-entrypoint-initdb.d/intranet.sql
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env/.env.prod.db
    networks:
      - backend

  redis:
    container_name: redis
    restart: always
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - /home/webmaster/docker_intranet/etc/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    command: redis-server /usr/local/etc/redis/redis.conf

  web:
    container_name: web
    build:
      context: .
      dockerfile: ./Dockerfile.prod
    restart: always
    volumes:
      - ./web:/app
      - static_volume:/app/static:rw
      - media_volume:/app/media:rw
    ports:
      - "8000:8000"
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    env_file:
      - ./.env/.env.prod
    networks:
      - backend
      - frontend
    command: gunicorn intranet.wsgi:application --worker-class=gevent --worker-connections=1000 --workers=4 --bind 0.0.0.0:8000

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - web
    volumes:
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./etc/nginx/sites-enabled/:/etc/nginx/sites-enabled:ro
      - ./etc/nginx/sites-available/:/etc/nginx/sites-available:ro
      - /etc/localtime:/etc/localtime:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
    networks:
      - frontend
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

  fix-permissions:
    container_name: permissions
    image: python:3.12.0-bullseye
    user: root
    depends_on:
      - web
      - nginx
    command: >
      sh -c 'chown -R 1000:1000 /app/media /app/static && chmod -R 775 /app/media /app/static'
    volumes:
      - media_volume:/app/media:rw
      - static_volume:/app/static:rw
  # certbot:
  #   container_name: certbot
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./certbot/www/:/var/www/certbot/:rw
  #     - ./certbot/conf/:/etc/letsencrypt/:rw
  #   networks:
  #     - frontend
  #   entrypoint: "/bin/sh -c 'while :; do echo \"Certbot is in standby mode...\"; sleep 3600; done;'"
